import streamlit as st
import pickle
import pandas as pd
import numpy as np
from tensorflow import keras
import matplotlib.pyplot as plt

# Configuraci√≥n
st.set_page_config(page_title="Predictor de Precios", layout="wide")
st.title("üîß Predictor de Precios de Veh√≠culos (ML + DL)")

# Cargar y limpiar dataframe
try:
    df_2 = pd.read_csv('C:\\Users\\abner\\proyecto\\Proyecto-\\DB\\datos_limpios.csv')   
    df_2 = df_2.dropna(subset=['combustible', 'tipo_carroceria', 'transmision'])
    
    # Obtener opciones para los selectboxes
    df_d = df_2['modelo'].unique().tolist()
    df_g = df_2['combustible'].unique().tolist()
    df_c = df_2['tipo_carroceria'].unique().tolist()
    df_t = df_2['transmision'].unique().tolist()
    
except Exception as e:
    st.error(f"Error al cargar los datos: {str(e)}")
    st.stop()

# Cargar modelos
@st.cache_resource
def load_models():
    try:
        # Cargar modelo de ML
        with open('C:\\Users\\abner\\proyecto\\Proyecto-\\streamlit\\mejor_modelo_top.pkl', 'rb') as f:
            ml_model = pickle.load(f)
            
        # Cargar modelo de DL (Keras)
        dl_model = keras.models.load_model('C:\\Users\\abner\\proyecto\\Proyecto-\\streamlit\\modelo_red_neuronal_mae.keras')
        
        # Cargar encoders y scaler
        with open("C:\\Users\\abner\\proyecto\\Proyecto-\\streamlit\\ohe_combustible.pkl", "rb") as f:
            ohe_combustible = pickle.load(f)
        
        with open("C:\\Users\\abner\\proyecto\\Proyecto-\\streamlit\\target_encoding_modelo.pkl", "rb") as f:
            target_encoding_modelo = pickle.load(f)
            
        with open("C:\\Users\\abner\\proyecto\\Proyecto-\\streamlit\\ohe_tipo_carroceria.pkl", "rb") as f:
            ohe_tipo_carroceria = pickle.load(f)    
            
        with open("C:\\Users\\abner\\proyecto\\Proyecto-\\streamlit\\standard_scaler.pkl", "rb") as f:
            scaler = pickle.load(f)
            
        return ml_model, dl_model, ohe_combustible, target_encoding_modelo, ohe_tipo_carroceria, scaler
        
    except Exception as e:
        st.error(f"Error al cargar los modelos: {str(e)}")
        return None, None, None, None, None, None

ml_model, dl_model, ohe_combustible, target_encoding_modelo, ohe_tipo_carroceria, scaler = load_models()

# Mostrar especificaciones del modelo
st.sidebar.subheader("Especificaciones del Modelo")
st.sidebar.write("""
**Modelos disponibles:**
1. Machine Learning (Regresion Lineal)
2. Deep Learning (Red Neuronal)

**Features requeridos:**
- Modelo
- Kilometraje
- Potencia (CV)
- A√±o de matriculaci√≥n
- Combustible
- Tipo de carrocer√≠a
- Transmisi√≥n
- Financiaci√≥n disponible
""")

# Crear pesta√±as al principio del layout principal
tab1, tab2 = st.tabs(["Predicci√≥n", "Documentaci√≥n de Feature Importance"])

with tab1:
    # Formulario de entrada
    with st.form("vehicle_form"):
        st.header("Ingrese los detalles del veh√≠culo")
        
        col1, col2 = st.columns(2)
        
        with col1:
            modelo = st.selectbox("Modelo del Veh√≠culo", options=df_d)
            kilometraje = st.number_input("Kilometraje (km)", min_value=0, value=50000, 
                                         help="Ingrese el kilometraje total del veh√≠culo")
            potencia_cv = st.number_input("Potencia (CV)", min_value=50, max_value=2000, value=120,
                                        help="Caballos de fuerza del motor")
            a√±o_matriculacion = st.slider("A√±o de matriculaci√≥n", 2000, 2025, 2020,
                                        help="A√±o en que el veh√≠culo fue matriculado por primera vez")
            
        with col2:
            combustible = st.selectbox("Tipo de combustible", options=df_g,
                                     help="Seleccione el tipo de combustible que usa el veh√≠culo")
            tipo_carroceria = st.selectbox("Tipo de carrocer√≠a", options=df_c,
                                         help="Estilo de carrocer√≠a del veh√≠culo")
            transmision = st.radio("Tipo de transmisi√≥n", options=df_t, index=0,
                                  help="Sistema de transmisi√≥n del veh√≠culo")    
            financiacion_disponible = st.checkbox("Financiaci√≥n disponible",
                                                help="¬øEl veh√≠culo tiene opciones de financiaci√≥n?")
        
        submitted = st.form_submit_button("Predecir Precio")
        
    if submitted:
        try:
            # Crear dataframe con los inputs del usuario
            input_usuario = pd.DataFrame({
                'modelo': [modelo],
                'kilometraje': [kilometraje],
                'potencia_cv': [potencia_cv],
                'a√±o_matriculacion': [a√±o_matriculacion],
                'combustible': [combustible],
                'tipo_carroceria': [tipo_carroceria],
                'transmision': [transmision],
                'financiacion_disponible': [financiacion_disponible]
            })

            # Aplicar transformaciones
            input_usuario['modelo_te'] = input_usuario['modelo'].map(target_encoding_modelo)
            
            combustible_encoded = ohe_combustible.transform(input_usuario[['combustible']])
            combustible_cols = [f"combustible_{cat}" for cat in ohe_combustible.categories_[0]]
            df_combustible = pd.DataFrame(combustible_encoded, columns=combustible_cols, index=input_usuario.index)
            input_usuario = pd.concat([input_usuario, df_combustible], axis=1)
            input_usuario.drop(columns=['combustible'], inplace=True)
            
            tipo_carroceria_encoded = ohe_tipo_carroceria.transform(input_usuario[['tipo_carroceria']])
            tipo_carroceria_cols = [f"tipo_carroceria_{cat}" for cat in ohe_tipo_carroceria.categories_[0]]
            df_tipo_carroceria = pd.DataFrame(tipo_carroceria_encoded, columns=tipo_carroceria_cols, index=input_usuario.index)
            input_usuario = pd.concat([input_usuario, df_tipo_carroceria], axis=1)
            input_usuario.drop(columns=['tipo_carroceria'], inplace=True)
            
            input_usuario['transmision_bin'] = input_usuario['transmision'].apply(lambda x: 1 if x == 'Autom√°tica' else 0)
            input_usuario['transmision_bin'] = input_usuario['transmision_bin'].astype(int)
            
            input_usuario['financiacion_disponible'] = input_usuario['financiacion_disponible'].astype(int)
            
            column_order = [
                'modelo_te', 'kilometraje', 'potencia_cv', 'a√±o_matriculacion',
                'combustible_Di√©sel', 'tipo_carroceria_Deportivo', 'transmision_bin',
                'combustible_El√©ctrico', 'financiacion_disponible',
                'combustible_H√≠brido Enchufable'
            ]
            
            for col in column_order:
                if col not in input_usuario.columns:
                    input_usuario[col] = 0
            
            input_usuario = input_usuario[column_order]
            
            # Escalar los datos
            input_data = scaler.transform(input_usuario)

            # Hacer predicciones
            precio_ml = ml_model.predict(input_data)[0]
            precio_dl = dl_model.predict(input_data)[0][0]
            
            # Mostrar resultados
            col1, col2 = st.columns(2)
            
            with col1:
                st.success(f"## üñ•Ô∏è ML (Regresion Lineal)")
                st.success(f"### Precio estimado: ‚Ç¨{precio_ml:,.2f}")
                
            with col2:
                st.info(f"## üß† DL (Red Neuronal)")
                st.info(f"### Precio estimado: ‚Ç¨{precio_dl:,.2f}")
            
            diferencia = abs(precio_ml - precio_dl)
            st.warning(f"**Diferencia entre modelos:** ‚Ç¨{diferencia:,.2f} ({diferencia/min(precio_ml, precio_dl)*100:.1f}%)")
            
            # Detalles t√©cnicos
            with st.expander("üìä Detalles t√©cnicos de la predicci√≥n"):
                st.write("**Valores ingresados (transformados):**")
                
                features_show = [
                    ('Modelo (codificado)', 'modelo_te'),
                    ('Kilometraje', 'kilometraje'),
                    ('Potencia (CV)', 'potencia_cv'),
                    ('A√±o matriculaci√≥n', 'a√±o_matriculacion'),
                    ('Combustible Di√©sel', 'combustible_Di√©sel'),
                    ('Tipo carrocer√≠a Deportivo', 'tipo_carroceria_Deportivo'),
                    ('Transmisi√≥n Autom√°tica', 'transmision_bin'),
                    ('Combustible El√©ctrico', 'combustible_El√©ctrico'),
                    ('Financiaci√≥n disponible', 'financiacion_disponible'),
                    ('Combustible H√≠brido Enchufable', 'combustible_H√≠brido Enchufable')
                ]
                
                st.table(pd.DataFrame({
                    'Caracter√≠stica': [x[0] for x in features_show],
                    'Valor': [input_usuario[x[1]].values[0] for x in features_show]
                }))
                
                if hasattr(ml_model, 'feature_importances_'):
                    st.write("**Importancia de caracter√≠sticas (Random Forest):**")
                    importance_df = pd.DataFrame({
                        'Caracter√≠stica': [x[0] for x in features_show],
                        'Importancia': ml_model.feature_importances_
                    }).sort_values('Importancia', ascending=False)
                    
                    st.bar_chart(importance_df.set_index('Caracter√≠stica'))
                    st.write("Valores de importancia:")
                    st.dataframe(importance_df)
            
        except Exception as e:
            st.error(f"Error en la predicci√≥n: {str(e)}")

with tab2:
    st.header("üìö Documentaci√≥n de Feature Importance")
    
    st.markdown("""
    ## ¬øQu√© es Feature Importance?
    
    La importancia de caracter√≠sticas es una m√©trica que nos ayuda a entender:
    - Qu√© variables influyen m√°s en las predicciones
    - C√≥mo contribuye cada caracter√≠stica al resultado
    - Qu√© caracter√≠sticas podr√≠amos eliminar sin afectar el rendimiento
    """)
    
    st.markdown("""
    ## M√©todos de C√°lculo
    
    ### Para modelos de √°rboles:
    - Basado en reducci√≥n promedio de impureza (Gini/entrop√≠a)
    - Frecuencia de uso para dividir nodos
    
    ### Para modelos lineales:
    - Basado en coeficientes (valor absoluto)
    - Requiere datos normalizados
    
    ### Para redes neuronales:
    - Permutation Importance
    - SHAP values
    """)
    
    st.markdown("""
    ## Interpretaci√≥n
    
    1. Valores altos = caracter√≠sticas m√°s importantes
    2. Valores bajos = poco impacto
    3. Importancia relativa > valores absolutos
    4. No implica causalidad
    """)
    
    if ml_model is not None and hasattr(ml_model, 'feature_importances_'):
        st.markdown("""
        ## Feature Importance en tu Modelo
        
        Tu modelo calcula la importancia bas√°ndose en:
        - Reducci√≥n de impureza en los √°rboles
        - Frecuencia de uso en divisiones
        
        Recomendaciones:
        - Eliminar caracter√≠sticas con importancia cercana a cero
        - Analizar las m√°s importantes para entender el modelo
        """)
        
        try:
            features_show = [
                ('Modelo (codificado)', 'modelo_te'),
                ('Kilometraje', 'kilometraje'),
                ('Potencia (CV)', 'potencia_cv'),
                ('A√±o matriculaci√≥n', 'a√±o_matriculacion'),
                ('Combustible Di√©sel', 'combustible_Di√©sel'),
                ('Tipo carrocer√≠a Deportivo', 'tipo_carroceria_Deportivo'),
                ('Transmisi√≥n Autom√°tica', 'transmision_bin'),
                ('Combustible El√©ctrico', 'combustible_El√©ctrico'),
                ('Financiaci√≥n disponible', 'financiacion_disponible'),
                ('Combustible H√≠brido Enchufable', 'combustible_H√≠brido Enchufable')
            ]
            
            importance_df = pd.DataFrame({
                'Caracter√≠stica': [x[0] for x in features_show],
                'Importancia': ml_model.feature_importances_
            }).sort_values('Importancia', ascending=False)
            
            st.subheader("Importancia de Caracter√≠sticas")
            
            col1, col2 = st.columns([3, 2])
            
            with col1:
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.barh(importance_df['Caracter√≠stica'], importance_df['Importancia'])
                ax.set_xlabel('Importancia')
                ax.set_title('Importancia Relativa de Caracter√≠sticas')
                st.pyplot(fig)
            
            with col2:
                st.dataframe(importance_df.style.format({'Importancia': '{:.4f}'}))
                
        except Exception as e:
            st.warning(f"No se pudo mostrar la importancia: {str(e)}")

# Instrucciones para el usuario
st.sidebar.markdown("""
### üìù Instrucciones:
1. Complete todos los campos del formulario
2. Haga clic en **"Predecir Precio"**
3. Compare los resultados de ambos modelos

### ‚ÑπÔ∏è Informaci√≥n adicional:
- **ML (Random Forest):** Modelo basado en √°rboles de decisi√≥n
- **DL (Red Neuronal):** Modelo de aprendizaje profundo
- Los precios son estimaciones basadas en datos hist√≥ricos
""")